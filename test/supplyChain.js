const SupplyChain = artifacts.require('SupplyChain');

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    let sku = 1;
    let upc = 1;
    const ownerID = accounts[0]
    const originHarvesterID = accounts[1]
    const originHarvesterName = "John Doe"
    const originForestInformation = "Yarray Valley"
    const originForestLatitude = "-38.239770"
    const originForestLongitude = "144.341490"
    let productID = sku + upc
    const productNotes = "Hard wood from Oak tree"
    const productPrice = web3.utils.toWei("1", "ether")
    let woodState = 0
    const distributerID = accounts[2]
    const retailerID = accounts[3]
    const customerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Harvester: accounts[1] ", accounts[1])
    console.log("Distributer: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("harvestWood() that allows a harvester to harvest wood", async() => {
        const supplyChain = await SupplyChain.deployed();

        let noEventEmitted = false;
        await supplyChain.getPastEvents('allEvents', (err, events) => {
            noEventEmitted = events.length === 0;
        });

        // add harvester
        await supplyChain.addHarvester(originHarvesterID);
        let harvesterAddedEmitted = false;
        await supplyChain.getPastEvents('HarvesterAdded', (err, events) => {
            harvesterAddedEmitted = events.length > 0;
        });

        await supplyChain.harvestWood(
            upc, 
            originHarvesterID, 
            originHarvesterName, 
            originForestInformation,
            originForestLatitude,
            originForestLongitude,
            productNotes
        );

        let eventEmitted = false;
        await supplyChain.getPastEvents('Harvested', (err, events) => {
            eventEmitted = events.length > 0;
        });


        const woodInfoPartOne = await supplyChain.fetchWoodInfoBufferOne(upc);
        const woodInfoPartTwo = await supplyChain.fetchWoodInfoBufferTwo(upc);

        assert.equal(woodInfoPartOne.woodSKU, sku, "Error: invalid sku");
        assert.equal(woodInfoPartOne.woodUPC, upc, "Error: invalid UPC");
        assert.equal(woodInfoPartOne.ownerID, originHarvesterID, "Error: invalid ownerID");
        assert.equal(woodInfoPartOne.originHarvesterID, originHarvesterID, "Error: invalid originHarvesterID");
        assert.equal(woodInfoPartOne.originHarvesterName, originHarvesterName, "Error: invalid originHarvesterName");
        assert.equal(woodInfoPartOne.originForestInformation, originForestInformation, "Error: invalid originForestInformation");
        assert.equal(woodInfoPartOne.originForestLatitude, originForestLatitude, "Error: invalid originForestLatitude");
        assert.equal(woodInfoPartOne.originForestLongitude, originForestLongitude, "Error: invalid originForestLongitude");
        assert.equal(woodInfoPartTwo.productID, productID, "Error: invalid productID");
        assert.equal(woodInfoPartTwo.productNotes, productNotes, "Error: invalid productNotes");
        assert.equal(woodInfoPartTwo.woodState, 0, "Error: invalid woodState");

        assert.equal(noEventEmitted, true, "Error: invalid event emitted");
        assert.equal(harvesterAddedEmitted, true, "Error: HarvesterAdded event emitted");
        assert.equal(eventEmitted, true, "Error: Harvested event not emitted");
    });

    // 2nd Test
    it("processWood() that allows a harvester to process Wood", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        await supplyChain.processWood(upc, { from: originHarvesterID });

        let eventEmitted = false;
        await supplyChain.getPastEvents('Processed', (err, events) => {
            eventEmitted = events.length > 0;
        });

        const woodInfoPartTwo = await supplyChain.fetchWoodInfoBufferTwo(upc);
        
        assert.equal(Number(woodInfoPartTwo.woodState), 1, "Error: invalid woodState");
        assert.equal(eventEmitted, true, "Error: Processed event not emitted");
    });    

    // 3rd Test
    it("packWood() that allows a harvester to pack wood", async() => {    
        const supplyChain = await SupplyChain.deployed();
        
        await supplyChain.packWood(upc, { from: originHarvesterID });

        let eventEmitted = false;
        await supplyChain.getPastEvents('Packed', (err, events) => {
            eventEmitted = events.length > 0;
        });

        const woodInfoPartTwo = await supplyChain.fetchWoodInfoBufferTwo(upc);
        
        assert.equal(Number(woodInfoPartTwo.woodState), 2, "Error: invalid woodState");
        assert.equal(eventEmitted, true, "Error: Packed event not emitted");
    });    

    // 4th Test
    it("sellWood() that allows a harvester to sell wood", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        await supplyChain.sellWood(upc, productPrice, { from: originHarvesterID });

        let eventEmitted = false;
        await supplyChain.getPastEvents('ForSale', (err, events) => {
            eventEmitted = events.length > 0;
        });

        const woodInfoPartTwo = await supplyChain.fetchWoodInfoBufferTwo(upc);
        
        assert.equal(Number(woodInfoPartTwo.woodState), 3, "Error: invalid woodState");
        assert.equal(woodInfoPartTwo.productPrice, productPrice, "Error: invalid productPrice");
        assert.equal(eventEmitted, true, "Error: ForSale event not emitted");
    });  

    // 5th Test
    it("buyWood() that allows a distributer to buy wood", async() => {
        const supplyChain = await SupplyChain.deployed();

        let distributerAddedEvent = false;
        await supplyChain.addDistributer(distributerID);
        await supplyChain.getPastEvents('DistributerAdded', (err, events) => {
            distributerAddedEvent = events.length > 0;
        });
        
        await supplyChain.buyWood(upc, { from: distributerID, value: productPrice });

        let eventEmitted = false;
        await supplyChain.getPastEvents('Sold', (err, events) => {
            eventEmitted = events.length > 0;
        });

        const woodInfoPartOne = await supplyChain.fetchWoodInfoBufferOne(upc);
        const woodInfoPartTwo = await supplyChain.fetchWoodInfoBufferTwo(upc);
        
        assert.equal(woodInfoPartOne.ownerID, distributerID, "Error: invalid ownerID");
        assert.equal(woodInfoPartTwo.distributerID, distributerID, "Error: invalid distributerID");
        assert.equal(Number(woodInfoPartTwo.woodState), 4, "Error: invalid woodState");
        
        assert.equal(distributerAddedEvent, true, "Error: DistributerAdded event not emitted");
        assert.equal(eventEmitted, true, "Error: Sold event not emitted");
    });   

    // 6th Test
    it("shipWood() that allows a distributer to ship wood", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        await supplyChain.shipWood(upc, { from: distributerID });

        let eventEmitted = false;
        await supplyChain.getPastEvents('Shipped', (err, events) => {
            eventEmitted = events.length > 0;
        });

        const woodInfoPartTwo = await supplyChain.fetchWoodInfoBufferTwo(upc);
        
        assert.equal(Number(woodInfoPartTwo.woodState), 5, "Error: invalid woodState");
        
        assert.equal(eventEmitted, true, "Error: Shipped event not emitted");
    });    

    // 7th Test
    it("receiveWood() that allows a retailer to mark wood received", async() => {
        const supplyChain = await SupplyChain.deployed();

        let retailerAddedEvent = false;
        await supplyChain.addRetailer(retailerID);
        await supplyChain.getPastEvents('RetailerAdded', (err, events) => {
            retailerAddedEvent = events.length > 0;
        });
        
        await supplyChain.receiveWood(upc, { from: retailerID });

        let eventEmitted = false;
        await supplyChain.getPastEvents('Received', (err, events) => {
            eventEmitted = events.length > 0;
        });

        const woodInfoPartOne = await supplyChain.fetchWoodInfoBufferOne(upc);
        const woodInfoPartTwo = await supplyChain.fetchWoodInfoBufferTwo(upc);
        
        assert.equal(woodInfoPartOne.ownerID, retailerID, "Error: invalid ownerID");
        assert.equal(woodInfoPartTwo.retailerID, retailerID, "Error: invalid RetailerID");
        assert.equal(Number(woodInfoPartTwo.woodState), 6, "Error: invalid woodState");
        
        assert.equal(retailerAddedEvent, true, "Error: RetailerAdded event not emitted");
        assert.equal(eventEmitted, true, "Error: Received event not emitted");
    });    

    // 8th Test
    it("purchaseWood() that allows a customer to purchase wood", async() => {
        const supplyChain = await SupplyChain.deployed();

        let customerAddedEvent = false;
        await supplyChain.addCustomer(customerID);
        await supplyChain.getPastEvents('CustomerAdded', (err, events) => {
            customerAddedEvent = events.length > 0;
        });
        
        await supplyChain.purchaseWood(upc, { from: customerID });

        let eventEmitted = false;
        await supplyChain.getPastEvents('Purchased', (err, events) => {
            eventEmitted = events.length > 0;
        });

        const woodInfoPartOne = await supplyChain.fetchWoodInfoBufferOne(upc);
        const woodInfoPartTwo = await supplyChain.fetchWoodInfoBufferTwo(upc);
        
        assert.equal(woodInfoPartOne.ownerID, customerID, "Error: invalid ownerID");
        assert.equal(woodInfoPartTwo.customerID, customerID, "Error: invalid customerID");
        assert.equal(Number(woodInfoPartTwo.woodState), 7, "Error: invalid woodState");
        
        assert.equal(customerAddedEvent, true, "Error: CustomerAdded event not emitted");
        assert.equal(eventEmitted, true, "Error: Purchased event not emitted");
    });

    // 9th Test
    it("fetchWoodInfoBufferOne() that allows anyone to fetch wood details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()
        const woodInfoPartOne = await supplyChain.fetchWoodInfoBufferOne(upc);        
        
        assert.equal(woodInfoPartOne.woodSKU, sku, "Error: invalid sku");
        assert.equal(woodInfoPartOne.woodUPC, upc, "Error: invalid UPC");
        assert.equal(woodInfoPartOne.ownerID, customerID, "Error: invalid ownerID");
        assert.equal(woodInfoPartOne.originHarvesterID, originHarvesterID, "Error: invalid originHarvesterID");
        assert.equal(woodInfoPartOne.originHarvesterName, originHarvesterName, "Error: invalid originHarvesterName");
        assert.equal(woodInfoPartOne.originForestInformation, originForestInformation, "Error: invalid originForestInformation");
        assert.equal(woodInfoPartOne.originForestLatitude, originForestLatitude, "Error: invalid originForestLatitude");
        assert.equal(woodInfoPartOne.originForestLongitude, originForestLongitude, "Error: invalid originForestLongitude");
    });

    // 10th Test
    it("fetchWoodInfoBufferTwo() that allows anyone to fetch wood details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()
        const woodInfoPartTwo = await supplyChain.fetchWoodInfoBufferTwo(upc);

        assert.equal(woodInfoPartTwo.productID, productID, "Error: invalid productID");
        assert.equal(woodInfoPartTwo.productNotes, productNotes, "Error: invalid productNotes");
        assert.equal(woodInfoPartTwo.productPrice, productPrice, "Error: invalid productPrice");
        assert.equal(Number(woodInfoPartTwo.woodState), 7, "Error: invalid woodState");
        assert.equal(woodInfoPartTwo.distributerID, distributerID, "Error: invalid distributerID");
        assert.equal(woodInfoPartTwo.retailerID, retailerID, "Error: invalid retailerID");
        assert.equal(woodInfoPartTwo.customerID, customerID, "Error: invalid customerID");
    });
});